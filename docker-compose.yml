version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: precatorios_postgres
    environment:
      POSTGRES_DB: precatorios
      POSTGRES_USER: precatorios_user
      POSTGRES_PASSWORD: precatorios_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - precatorios_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U precatorios_user -d precatorios"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: precatorios_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - precatorios_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: precatorios_api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://precatorios_user:precatorios_pass@postgres:5432/precatorios
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=dev_jwt_secret_change_in_production
      - API_PORT=3001
    volumes:
      - ./apps/api:/app
      - /app/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - precatorios_network
    command: npm run dev

  # Frontend Web App
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: precatorios_web
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:3001/api
      - REACT_APP_ENV=development
    volumes:
      - ./apps/web:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - precatorios_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: precatorios_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - web
    networks:
      - precatorios_network

volumes:
  postgres_data:
  redis_data:

networks:
  precatorios_network:
    driver: bridge